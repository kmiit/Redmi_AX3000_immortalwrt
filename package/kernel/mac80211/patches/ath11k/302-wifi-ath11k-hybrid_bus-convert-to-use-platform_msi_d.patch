From a5275f32e3bcf8e25f2858ae92f8173e19f3f122 Mon Sep 17 00:00:00 2001
From: Ziyang Huang <hzyitc@outlook.com>
Date: Sun, 20 Oct 2024 20:28:28 +0800
Subject: [PATCH 2/3] wifi: ath11k: hybrid_bus: convert to use
 platform_msi_domain_* api

The hardcode IRQ makes it hard to work with other PCIE devices.

So let's convert it to use platform_msi_domain_* api.

Signed-off-by: Ziyang Huang <hzyitc@outlook.com>
---
 drivers/net/wireless/ath/ath11k/ahb.c | 50 +++++++++++++--------------
 1 file changed, 24 insertions(+), 26 deletions(-)

diff --git a/drivers/net/wireless/ath/ath11k/ahb.c b/drivers/net/wireless/ath/ath11k/ahb.c
index 7c0a235..1846705 100644
--- a/drivers/net/wireless/ath/ath11k/ahb.c
+++ b/drivers/net/wireless/ath/ath11k/ahb.c
@@ -12,6 +12,7 @@
 #include <linux/dma-mapping.h>
 #include <linux/of_address.h>
 #include <linux/iommu.h>
+#include <linux/msi.h>
 #include "ahb.h"
 #include "debug.h"
 #include "hif.h"
@@ -450,8 +451,11 @@ static void ath11k_ahb_free_irq(struct ath11k_base *ab)
 	int irq_idx;
 	int i;
 
-	if (ab->hw_params.hybrid_bus_type)
-		return ath11k_pcic_free_irq(ab);
+	if (ab->hw_params.hybrid_bus_type) {
+		ath11k_pcic_free_irq(ab);
+		platform_msi_domain_free_irqs(&ab->pdev->dev);
+		return;
+	}
 
 	for (i = 0; i < ab->hw_params.ce_count; i++) {
 		if (ath11k_ce_get_attr_flags(ab, i) & CE_ATTR_DIS_INTR)
@@ -811,13 +815,21 @@ static int ath11k_core_get_rproc(struct ath11k_base *ab)
 	return 0;
 }
 
+static void ath11k_write_msi_msg(struct msi_desc *desc, struct msi_msg *msg)
+{
+	struct platform_device *pdev = to_platform_device(msi_desc_to_dev(desc));
+	struct ath11k_base *ab = platform_get_drvdata(pdev);
+
+	if (desc->irq == ab->pci.msi.irqs[0]) {
+		ab->pci.msi.addr_lo = msg->address_lo;
+		ab->pci.msi.addr_hi = msg->address_hi;
+		ab->pci.msi.ep_base_data = msg->data;
+	}
+}
+
 static int ath11k_ahb_setup_msi_resources(struct ath11k_base *ab)
 {
 	struct platform_device *pdev = ab->pdev;
-	phys_addr_t msi_addr_pa;
-	dma_addr_t msi_addr_iova;
-	struct resource *res;
-	int int_prop;
 	int ret;
 	int i;
 
@@ -827,29 +839,15 @@ static int ath11k_ahb_setup_msi_resources(struct ath11k_base *ab)
 		return ret;
 	}
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!res) {
-		ath11k_err(ab, "failed to fetch msi_addr\n");
-		return -ENOENT;
-	}
-
-	msi_addr_pa = res->start;
-	msi_addr_iova = dma_map_resource(ab->dev, msi_addr_pa, PAGE_SIZE,
-					 DMA_FROM_DEVICE, 0);
-	if (dma_mapping_error(ab->dev, msi_addr_iova))
-		return -ENOMEM;
-
-	ab->pci.msi.addr_lo = lower_32_bits(msi_addr_iova);
-	ab->pci.msi.addr_hi = upper_32_bits(msi_addr_iova);
-
-	ret = of_property_read_u32_index(ab->dev->of_node, "interrupts", 1, &int_prop);
-	if (ret)
+	ret = platform_msi_domain_alloc_irqs(&pdev->dev, ab->pci.msi.config->total_vectors,
+					     ath11k_write_msi_msg);
+	if (ret) {
+		ath11k_err(ab, "failed to alloc msi irqs: %d\n", ret);
 		return ret;
-
-	ab->pci.msi.ep_base_data = int_prop + 32;
+	}
 
 	for (i = 0; i < ab->pci.msi.config->total_vectors; i++) {
-		ret = platform_get_irq(pdev, i);
+		ret = msi_get_virq(&ab->pdev->dev, i);
 		if (ret < 0)
 			return ret;
 
-- 
2.40.1

